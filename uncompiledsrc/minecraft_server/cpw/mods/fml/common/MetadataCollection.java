package cpw.mods.fml.common;

import argo.jdom.JdomParser;
import argo.jdom.JsonNode;
import argo.jdom.JsonRootNode;
import argo.saj.InvalidSyntaxException;
import com.google.common.base.Throwables;
import com.google.common.collect.Maps;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;

public class MetadataCollection
{
    private static JdomParser parser = new JdomParser();
    private Map metadatas = Maps.newHashMap();
    private int metadataVersion = 1;

    public static MetadataCollection from(InputStream var0, String var1)
    {
        if (var0 == null)
        {
            return new MetadataCollection();
        }
        else
        {
            InputStreamReader var2 = new InputStreamReader(var0);

            try
            {
                JsonRootNode var3 = parser.parse(var2);
                return var3.hasElements() ? parse10ModInfo(var3) : parseModInfo(var3);
            }
            catch (InvalidSyntaxException var4)
            {
                FMLLog.log(Level.SEVERE, (Throwable)var4, "The mcmod.info file in %s cannot be parsed as valid JSON. It will be ignored", new Object[] {var1});
                return new MetadataCollection();
            }
            catch (Exception var5)
            {
                throw Throwables.propagate(var5);
            }
        }
    }

    private static MetadataCollection parseModInfo(JsonRootNode var0)
    {
        MetadataCollection var1 = new MetadataCollection();
        var1.metadataVersion = Integer.parseInt(var0.getNumberValue(new Object[] {"modinfoversion"}));
        var1.parseModMetadataList(var0.getNode(new Object[] {"modlist"}));
        return var1;
    }

    private static MetadataCollection parse10ModInfo(JsonRootNode var0)
    {
        MetadataCollection var1 = new MetadataCollection();
        var1.parseModMetadataList(var0);
        return var1;
    }

    private void parseModMetadataList(JsonNode var1)
    {
        Iterator var2 = var1.getElements().iterator();

        while (var2.hasNext())
        {
            JsonNode var3 = (JsonNode)var2.next();
            ModMetadata var4 = new ModMetadata(var3);
            this.metadatas.put(var4.modId, var4);
        }
    }

    public ModMetadata getMetadataForId(String var1, Map var2)
    {
        if (!this.metadatas.containsKey(var1))
        {
            ModMetadata var3 = new ModMetadata();
            var3.modId = var1;
            var3.name = (String)var2.get("name");
            var3.version = (String)var2.get("version");
            var3.autogenerated = true;
            this.metadatas.put(var1, var3);
        }

        return (ModMetadata)this.metadatas.get(var1);
    }
}
