package cpw.mods.fml.client;

import com.google.common.base.Strings;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.ModContainer;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Iterator;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.util.StringTranslate;
import org.lwjgl.opengl.GL11;

public class GuiModList extends GuiScreen
{
    private GuiScreen mainMenu;
    private GuiSlotModList modList;
    private int selected = -1;
    private ModContainer selectedMod;
    private int listWidth;
    private ArrayList mods;

    public GuiModList(GuiScreen var1)
    {
        this.mainMenu = var1;
        this.mods = new ArrayList();
        FMLClientHandler.instance().addSpecialModEntries(this.mods);
        Iterator var2 = Loader.instance().getModList().iterator();

        while (var2.hasNext())
        {
            ModContainer var3 = (ModContainer)var2.next();

            if (var3.getMetadata() != null && var3.getMetadata().parentMod == null && !Strings.isNullOrEmpty(var3.getMetadata().parent))
            {
                String var4 = var3.getMetadata().parent;
                ModContainer var5 = (ModContainer)Loader.instance().getIndexedModList().get(var4);

                if (var5 != null)
                {
                    var3.getMetadata().parentMod = var5;
                    var5.getMetadata().childMods.add(var3);
                    continue;
                }
            }
            else if (var3.getMetadata() != null && var3.getMetadata().parentMod != null)
            {
                continue;
            }

            this.mods.add(var3);
        }
    }

    /**
     * Adds the buttons (and other controls) to the screen in question.
     */
    public void initGui()
    {
        ModContainer var2;

        for (Iterator var1 = this.mods.iterator(); var1.hasNext(); this.listWidth = Math.max(this.listWidth, this.getFontRenderer().a(var2.getVersion()) + 10))
        {
            var2 = (ModContainer)var1.next();
            this.listWidth = Math.max(this.listWidth, this.getFontRenderer().a(var2.getName()) + 10);
        }

        this.listWidth = Math.min(this.listWidth, 150);
        StringTranslate var3 = StringTranslate.getInstance();
        this.buttonList.add(new axy(6, this.width / 2 - 75, this.height - 38, var3.translateKey("gui.done")));
        this.modList = new GuiSlotModList(this, this.mods, this.listWidth);
        this.modList.registerScrollButtons(this.buttonList, 7, 8);
    }

    /**
     * Fired when a control is clicked. This is the equivalent of ActionListener.actionPerformed(ActionEvent e).
     */
    protected void actionPerformed(awg var1)
    {
        if (var1.g)
        {
            switch (var1.f)
            {
                case 6:
                    this.mc.a(this.mainMenu);
                    return;
            }
        }

        super.actionPerformed(var1);
    }

    public int drawLine(String var1, int var2, int var3)
    {
        this.fontRenderer.b(var1, var2, var3, 14151146);
        return var3 + 10;
    }

    /**
     * Draws the screen and all the components in it.
     */
    public void drawScreen(int var1, int var2, float var3)
    {
        this.modList.drawScreen(var1, var2, var3);
        this.drawCenteredString(this.fontRenderer, "Mod List", this.width / 2, 16, 16777215);
        int var4 = this.listWidth + 20;

        if (this.selectedMod != null)
        {
            GL11.glEnable(3042);

            if (!this.selectedMod.getMetadata().autogenerated)
            {
                int var5 = 35;
                String var6 = this.selectedMod.getMetadata().logoFile;

                if (!var6.isEmpty())
                {
                    GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                    this.mc.p.b(var6);
                    Dimension var7 = TextureFXManager.instance().getTextureDimensions(var6);
                    double var8 = (double)var7.width / 200.0D;
                    double var10 = (double)var7.height / 65.0D;
                    double var12 = 1.0D;

                    if (var8 > 1.0D || var10 > 1.0D)
                    {
                        var12 = 1.0D / Math.max(var8, var10);
                    }

                    var7.width = (int)((double)var7.width * var12);
                    var7.height = (int)((double)var7.height * var12);
                    byte var14 = 32;
                    bgd var15 = bgd.a;
                    var15.b();
                    var15.a((double)var4, (double)(var14 + var7.height), (double)this.zLevel, 0.0D, 1.0D);
                    var15.a((double)(var4 + var7.width), (double)(var14 + var7.height), (double)this.zLevel, 1.0D, 1.0D);
                    var15.a((double)(var4 + var7.width), (double)var14, (double)this.zLevel, 1.0D, 0.0D);
                    var15.a((double)var4, (double)var14, (double)this.zLevel, 0.0D, 0.0D);
                    var15.a();
                    var5 += 65;
                }

                this.fontRenderer.a(this.selectedMod.getMetadata().name, var4, var5, 16777215);
                var5 += 12;
                var5 = this.drawLine(String.format("Version: %s (%s)", new Object[] {this.selectedMod.getDisplayVersion(), this.selectedMod.getVersion()}), var4, var5);
                var5 = this.drawLine(String.format("Mod ID: \'%s\' Mod State: %s", new Object[] {this.selectedMod.getModId(), Loader.instance().getModState(this.selectedMod)}), var4, var5);

                if (!this.selectedMod.getMetadata().credits.isEmpty())
                {
                    var5 = this.drawLine(String.format("Credits: %s", new Object[] {this.selectedMod.getMetadata().credits}), var4, var5);
                }

                var5 = this.drawLine(String.format("Authors: %s", new Object[] {this.selectedMod.getMetadata().getAuthorList()}), var4, var5);
                var5 = this.drawLine(String.format("URL: %s", new Object[] {this.selectedMod.getMetadata().url}), var4, var5);
                var5 = this.drawLine(this.selectedMod.getMetadata().childMods.isEmpty() ? "No child mods for this mod" : String.format("Child mods: %s", new Object[] {this.selectedMod.getMetadata().getChildModList()}), var4, var5);
                int var16 = this.width - var4 - 20;

                if (var16 > 20)
                {
                    this.getFontRenderer().a(this.selectedMod.getMetadata().description, var4, var5 + 10, var16, 14540253);
                }
            }
            else
            {
                var4 = (this.listWidth + this.width) / 2;
                this.drawCenteredString(this.fontRenderer, this.selectedMod.getName(), var4, 35, 16777215);
                this.drawCenteredString(this.fontRenderer, String.format("Version: %s", new Object[] {this.selectedMod.getVersion()}), var4, 45, 16777215);
                this.drawCenteredString(this.fontRenderer, String.format("Mod State: %s", new Object[] {Loader.instance().getModState(this.selectedMod)}), var4, 55, 16777215);
                this.drawCenteredString(this.fontRenderer, "No mod information found", var4, 65, 14540253);
                this.drawCenteredString(this.fontRenderer, "Ask your mod author to provide a mod mcmod.info file", var4, 75, 14540253);
            }

            GL11.glDisable(3042);
        }

        super.drawScreen(var1, var2, var3);
    }

    Minecraft getMinecraftInstance()
    {
        return this.mc;
    }

    awv getFontRenderer()
    {
        return this.fontRenderer;
    }

    public void selectModIndex(int var1)
    {
        this.selected = var1;

        if (var1 >= 0 && var1 <= this.mods.size())
        {
            this.selectedMod = (ModContainer)this.mods.get(this.selected);
        }
        else
        {
            this.selectedMod = null;
        }
    }

    public boolean modIndexSelected(int var1)
    {
        return var1 == this.selected;
    }
}
